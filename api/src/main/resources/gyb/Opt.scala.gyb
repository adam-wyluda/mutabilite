package offheap.collection

%{
types = ['Boolean', 'Char', 'Byte', 'Short',
'Int', 'Long', 'Float', 'Double', 'Object']
}%

% for T in types:

trait Opt_${T} extends Any with Opt[${T}] {
  def get: ${T}
  def foreach(f: ${T} => Unit): Unit
}

class Some_${T}(value: ${T}) extends Opt_${T} {
  def get: ${T} = value
  def isEmpty = false

  def size = 1
  def foreach(f: ${T} => Unit) = f(value)
}

object None_${T} extends Opt_${T} {
  def get = throw new NoSuchElementException
  def isEmpty = true

  def size = 0
  def foreach(f: ${T} => Unit) = ()
}

% end
