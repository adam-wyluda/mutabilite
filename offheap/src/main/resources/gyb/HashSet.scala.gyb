package offheap.collection

import scala.{ offheap => oh }
import scala.offheap.data

import HashEq._

%{
types = ['Boolean', 'Char', 'Byte', 'Short',
'Int', 'Long', 'Float', 'Double', 'Object']
}%

% for T in types:

%{
  if T == 'Object':
    T_Arg = 'Long'
    T_Hash = 'Offheap'
  else:
    T_Arg = T
    T_Hash = T
}%

@data class OffheapHashSet_${T}
(
  var hashes: oh.Array[Int],
  var _keys: oh.Array[${T_Arg}],
  var _size: Int,
  var capacity: Int,
  var mask: Int
) {

  def free(implicit allocator: oh.Allocator) = {
    allocator.free(hashes.addr)
    allocator.free(_keys.addr)
    allocator.free(addr)
  }

  def apply(key: ${T_Arg})(implicit hashK: Hash_${T_Hash}): Boolean = indexOf(key) != -1

  private[this] def indexOf(key: ${T_Arg})
      (implicit hashK: Hash_${T_Hash}): Int = {
    var hash = calcHashCode(key)
    var pos = hash
    var dis = 0
    var result = -1
    while ({
      val nextHash = hashes(pos)
      if (!isInit(nextHash)) {
        val nextDis = (capacity + pos - nextHash) & mask
        if (nextDis >= dis) {
          if (hash == nextHash && hashK.eqv(_keys(pos), key)) {
            result = pos
            false
          } else {
            dis += 1
            pos = (pos + 1) & mask
            true
          }
        } else {
          false
        }
      } else {
        false
      }
    }) ()
    result
  }

  def add(key: ${T_Arg})
      (implicit hashK: Hash_${T_Hash}, allocator: oh.Allocator): Boolean = {
    var _key = key
    var originalHash = calcHashCode(key)
    var hash = originalHash
    var pos = hash
    var dis = 0
    var result = true
    while ({
      val nextHash = hashes(pos)
      if (isInit(nextHash)) {
        hashes(pos) = hash
        _keys(pos) = _key
        _size += 1
        growIfNecessary
        result = true
        false
      } else if (nextHash == originalHash && hashK.eqv(_keys(pos), key)) {
        result = false
        false
      } else {
        val nextDis = (capacity + pos - nextHash) & mask
        if (nextDis < dis) {
          val nextKey = _keys(pos)
          hashes(pos) = hash
          _keys(pos) = _key
          hash = nextHash
          _key = nextKey
          dis = nextDis
        }
        dis += 1
        pos = (pos + 1) & mask
        true
      }
    }) ()
    result
  }

  def remove(key: ${T_Arg})
      (implicit hashK: Hash_${T_Hash}): Boolean = {
    var index = indexOf(key)
    if (index != -1) {
      while ({
        val nextIndex = (index + 1) & mask
        val nextHash = hashes(nextIndex)
        if (!isInit(nextHash)) {
          val nextDis = (capacity + nextIndex - nextHash) & mask
          if (nextDis != 0) {
            hashes(index) = hashes(nextIndex)
            _keys(index) = _keys(nextIndex)
            index = nextIndex
            true
          } else {
            false
          }
        } else {
          false
        }
      }) ()
      hashes(index) = 0
      _size -= 1
      true
    } else {
      false
    }
  }

  def intersect(that: OffheapHashSet_${T})
      (implicit hashK: Hash_${T_Hash}, allocator: oh.Allocator): OffheapHashSet_${T} = {
    val result = OffheapSet_${T}.create()
    foreach { a =>
      if (that(a)) result.add(a)
    }
    result
  }

  def union(that: OffheapHashSet_${T})
      (implicit hashK: Hash_${T_Hash}, allocator: oh.Allocator): OffheapHashSet_${T} = {
    val result = OffheapSet_${T}.create()
    this foreach (result.add(_))
    that foreach (result.add(_))
    result
  }

  def diff(that: OffheapHashSet_${T})
      (implicit hashK: Hash_${T_Hash}, allocator: oh.Allocator): OffheapHashSet_${T} = {
    val result = OffheapSet_${T}.create()
    foreach { a =>
      if (!that(a)) result.add(a)
    }
    result
  }

  @inline
  private[this] def shouldGrow = _size > capacity * 9 / 10

  private[this] def growIfNecessary
      (implicit hashK: Hash_${T_Hash}, allocator: oh.Allocator): Unit = {
    if (shouldGrow) {
      val oldCapacity = capacity
      val oldHashes = hashes
      val oldKeys = _keys
      capacity *= 2
      mask = capacity - 1
      hashes = oh.Array.fill[Int](capacity) { 0 }
      _keys = oh.Array.uninit[${T_Arg}](capacity)
      _size = 0
      var i = 0
      while (i < oldCapacity) {
        val hash = oldHashes(i)
        if (!isInit(hash)) {
          val key = oldKeys(i)
          add(key)
        }
        i += 1
      }
      allocator.free(oldHashes.addr)
      allocator.free(oldKeys.addr)
    }
  }

  private[this] def calcHashCode(key: ${T_Arg})(implicit hashK: Hash_${T_Hash}) = {
    var hash = hashK.hash(key) & mask
    hash |= (if (hash == 0) 1 else 0)
    hash
  }

  @inline
  private[this] def isInit(hash: Int) = hash == 0

  def empty = _size == 0
  def notEmpty = _size != 0

  def size: Int = _size

  def foreach(f: ${T_Arg} => Unit): Unit = {
    var i = 0
    while (i < capacity) {
      val hash = hashes(i)
      if (!isInit(hash)) {
        val key = _keys(i)
        f(key)
      }
      i += 1
    }
  }
}

object OffheapSet_${T} {
  def create(initialSize: Int = 8)(implicit allocator: oh.Allocator): OffheapHashSet_${T} =
    OffheapHashSet_${T}(
      oh.Array.fill[Int](initialSize) { 0 }, // hashes
      oh.Array.uninit[${T_Arg}](initialSize), // keys
      0, // size
      initialSize, // capacity
      initialSize - 1 // mask
    )
}

% end
