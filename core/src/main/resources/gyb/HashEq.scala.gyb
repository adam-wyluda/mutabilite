package offheap.collection

%{
types = ['Boolean', 'Char', 'Byte', 'Short',
'Int', 'Long', 'Float', 'Double']
}%

% for T in types:

trait Eq_${T} extends Eq[${T}] {
  def eqv(a: ${T}, b: ${T}): Boolean = a == b
}

trait Hash_${T} extends Eq_${T} with Hash[${T}] {
  def hash(value: ${T}): Int
}

% end

trait Eq_Object extends Eq[Any] {
  def eqv(a: Any, b: Any): Boolean = a == b
}

trait Hash_Object extends Eq_Object with Hash[Any] {
  def hash(value: Any): Int
}
