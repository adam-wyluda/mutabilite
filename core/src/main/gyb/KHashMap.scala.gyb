package offheap.collection

// Uses ideas from KHash library: http://attractivechaos.awardspace.com/khash.h.html

%{
from itertools import product

types = ['Boolean', 'Char', 'Byte', 'Short',
'Int', 'Long', 'Float', 'Double', 'Object']
}%

protected[collection] object Primes {
  val primes: Array[Int] = Array(
    0,          3,          11,         23,         53,
    97,         193,        389,        769,        1543,
    3079,       6151,       12289,      24593,      49157,
    98317,      196613,     393241,     786433,     1572869,
    3145739,    6291469,    12582917,   25165843,   50331653,
    100663319,  201326611,  402653189,  805306457,  1610612741
  )
}

% for (K, V) in product(types, types):

%{
  if (K == 'Object' and V == 'Object'):
    Param = '[K, V]'
  elif K == 'Object':
    Param = '[K]'
  elif V == 'Object':
    Param = '[V]'
  else:
    Param = ''

  if K == 'Object':
    K_Arg = 'K'
    K_Array = 'AnyRef'
    K_Set = 'Set_Object[K]'
    K_HashSet = 'HashSet_Object[K]'
    Cast_to_K = '.asInstanceOf[K]'
    Cast_from_K = '.asInstanceOf[AnyRef]'
  else:
    K_Arg = K
    K_Array = K
    K_Set = 'Set_' + K
    K_HashSet = 'HashSet_' + K
    Cast_to_K = ''
    Cast_from_K = ''

  if V == 'Object':
    V_Arg = 'V'
    V_Array = 'AnyRef'
    V_Seq = 'Seq_Object[V]'
    V_BufferSeq = 'BufferSeq_Object[V]'
    Cast_to_V = '.asInstanceOf[V]'
    Cast_from_V = '.asInstanceOf[AnyRef]'
  else:
    V_Arg = V
    V_Array = V
    V_Seq = 'Seq_' + V
    V_BufferSeq = 'BufferSeq_' + V
    Cast_to_V = ''
    Cast_from_V = ''
}%

class KHashMap_${K}_${V}${Param}(initialSize: Int = 8)
  % if K == V:
    (implicit hashK: Hash_${K})
  % else:
    (implicit hashK: Hash_${K}, hashV: Hash_${V})
  % end
    extends Map_${K}_${V}${Param} {

  var _size: Int
  var used: Int
  var threshold: Int
  var _buckets: Array[Byte]
  var _keys: Array[${K_Array}]
  var _valuess: Array[${V_Array}]

  private[this] def bucketEmpty(pos: Int) = _buckets(pos) == 0
  private[this] def bucketDel(pos: Int) = _buckets(pos) == 1
  private[this] def bucketEither(pos: Int) = _buckets(pos) != 3

  private[this] def setBucketNotDel(pos: Int) = _buckets(pos) = 0
  private[this] def setBucketNotEmpty(pos: Int) = _buckets(pos) = _buckets(pos) & 2
  private[this] def setBucketNeither(pos: Int) = _buckets(pos) = ???
  private[this] def setBucketDel(pos: Int) = _buckets(pos) = ???

  def apply(key: ${K_Arg}): ${V_Arg} = {
    val index = indexOf(key)
    if (index == -1) {
      throw new NoSuchElementException(s"key not found: $key")
    } else {
      _values(index)${Cast_to_V}
    }
  }

  def get(key: ${K_Arg}): Option[${V_Arg}] = {
    val index = indexOf(key)
    if (index == -1) {
      None
    } else {
      Some((_values(index)${Cast_to_V}))
    }
  }

  private[this] def indexOf(key: ${K_Arg}): Int = {
  }

  def put(key: ${K_Arg}, value: ${V_Arg}): Unit = {
  }

  def remove(key: ${K_Arg}): Unit = {

  }

  def keys: ${K_Set} = {
    val result = new ${K_HashSet}(initialSize = capacity)
    var i = 0
    while (i < capacity) {
      if (!isInit(hashes(i))) result.add(_keys(i)${Cast_to_K})
      i += 1
    }
    result
  }

  def values: ${V_Seq} = {
    val result = new ${V_BufferSeq}(initialSize = capacity)
    var i = 0
    while (i < capacity) {
      if (!isInit(hashes(i))) result.append(_values(i)${Cast_to_V})
      i += 1
    }
    result
  }

  def contains(key: ${K_Arg}): Boolean = indexOf(key) != -1

  private[this] def growIfNecessary: Unit =
    if (_size > threshold) {
      growToNewCapacity (capacity * (if (capacity < 10000) 4 else 2))
    }

  private[this] def growToNewCapacity(newCapacity: Int) = {
    val oldCapacity = capacity
    val oldHashes = hashes
    val oldKeys = _keys
    val oldValues = _values
    capacity = newCapacity
    threshold = (capacity * 0.9).toInt
    mask = capacity - 1
    hashes = new Array[Int](capacity)
    _keys = new Array[${K_Array}](capacity)
    _values = new Array[${V_Array}](capacity)
    _size = 0
    var i = 0
    while (i < oldCapacity) {
      val hash = oldHashes(i)
      if (!isInit(hash)) {
        val key = oldKeys(i)${Cast_to_K}
        val value = oldValues(i)${Cast_to_V}
        put(key, value)
      }
      i += 1
    }
  }

  private[this] def hashCode(key: ${K_Arg}) = {
    var hash = hashK.hash(key) & mask
    hash |= (if (hash == 0) 1 else 0)
    hash
  }

  def compact: Unit = {
    var newCapacity = 1
    while (newCapacity < size) newCapacity *= 2
    if (newCapacity != capacity) growToNewCapacity(newCapacity)
  }

  def hashAt(index: Int): Int = hashes(index)
  def keyAt(index: Int): ${K_Arg} = _keys(index)${Cast_to_K}
  def valueAt(index: Int): ${V_Arg} = _values(index)${Cast_to_V}
  def updateValue(index: Int, value: ${V_Arg}): Unit = _values(index) = value${Cast_from_V}
  def isInit(hash: Int) = hash == 0

  def isEmpty = _size == 0
  def size: Int = _size

  def foreach(f: (${K_Arg}, ${V_Arg}) => Unit): Unit = {
    var i = 0
    while (i < capacity) {
      val hash = hashes(i)
      if (!isInit(hash)) {
        val key = _keys(i)${Cast_to_K}
        val value = _values(i)${Cast_to_V}
        f(key, value)
      }
      i += 1
    }
  }
}

% end
