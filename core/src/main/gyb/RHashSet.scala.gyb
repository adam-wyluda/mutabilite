package offheap.collection

%{
types = ['Boolean', 'Char', 'Byte', 'Short',
'Int', 'Long', 'Float', 'Double', 'Object']
}%

% for T in types:

%{
  if T == 'Object':
    T_Arg = 'A'
    T_Param = '[A]'
    T_Array = 'AnyRef'
    Cast_to_T = '.asInstanceOf[A]'
    Cast_from_T = '.asInstanceOf[AnyRef]'
  else:
    T_Arg = T
    T_Param = ''
    T_Array = T
    Cast_to_T = ''
    Cast_from_T = ''
}%

trait Set_${T}${T_Param} extends Any with Set[${T_Arg}] {
  def apply(elem: ${T_Arg}): Boolean
  def add(elem: ${T_Arg}): Boolean
  def remove(elem: ${T_Arg}): Boolean
  def intersect(that: Set_${T}${T_Param}): Set_${T}${T_Param}
  def union(that: Set_${T}${T_Param}): Set_${T}${T_Param}
  def diff(that: Set_${T}${T_Param}): Set_${T}${T_Param}

  def hashAt(index: Int): Int
  def keyAt(index: Int): ${T_Arg}
  def isInit(hash: Int): Boolean
}

class HashSet_${T}${T_Param}(initialSize: Int = 8)(implicit hashK: Hash_${T}) extends Set_${T}${T_Param} {

  private[this] var hashes: Array[Int] = new Array[Int](initialSize)
  private[this] var _keys: Array[${T_Array}] = new Array[${T_Array}](initialSize)
  private[this] var _size = 0
  var capacity = initialSize
  private[this] var mask = capacity - 1
  private[this] var threshold = (capacity * 0.9).toInt

  def apply(key: ${T_Arg}): Boolean = indexOf(key) != -1

  private[this] def indexOf(key: ${T_Arg}): Int = {
    var hash = hashCode(key)
    var pos = hash
    var dis = 0
    var result = -1
    while ({
      val nextHash = hashes(pos)
      if (!isInit(nextHash)) {
        val nextDis = (capacity + pos - nextHash) & mask
        if (nextDis >= dis) {
          if (hashK.eqv(_keys(pos), key)) {
            result = pos
            false
          } else {
            dis += 1
            pos = (pos + 1) & mask
            true
          }
        } else {
          false
        }
      } else {
        false
      }
    }) ()
    result
  }

  def add(key: ${T_Arg}): Boolean = {
    var _key = key${Cast_from_T}
    var originalHash = hashCode(key)
    var hash = originalHash
    var pos = hash
    var dis = 0
    var result = true
    while ({
      val nextHash = hashes(pos)
      if (isInit(nextHash)) {
        hashes(pos) = hash
        _keys(pos) = _key
        _size += 1
        growIfNecessary
        result = true
        false
      } else if (hashK.eqv(_keys(pos), key)) {
        result = false
        false
      } else {
        val nextDis = (capacity + pos - nextHash) & mask
        if (nextDis < dis) {
          val nextKey = _keys(pos)
          hashes(pos) = hash
          _keys(pos) = _key
          hash = nextHash
          _key = nextKey
          dis = nextDis
        }
        dis += 1
        pos = (pos + 1) & mask
        true
      }
    }) ()
    result
  }

  def remove(key: ${T_Arg}): Boolean = {
    var index = indexOf(key)
    if (index != -1) {
      while ({
        val nextIndex = (index + 1) & mask
        val nextHash = hashes(nextIndex)
        if (!isInit(nextHash)) {
          val nextDis = (capacity + nextIndex - nextHash) & mask
          if (nextDis != 0) {
            hashes(index) = hashes(nextIndex)
            _keys(index) = _keys(nextIndex)
            index = nextIndex
            true
          } else {
            false
          }
        } else {
          false
        }
      }) ()
      hashes(index) = 0
      % if T == 'Object':
      _keys(index) = null
      % end
      _size -= 1
      true
    } else {
      false
    }
  }

  def intersect(that: Set_${T}${T_Param}): HashSet_${T}${T_Param} = {
    val result = new HashSet_${T}${T_Param}
    var i = 0
    while (i < capacity) {
      val hash = hashes(i)
      if (!isInit(hash)) {
        val key = _keys(i)${Cast_to_T}
        if (that(key)) result.add(key)
      }
      i += 1
    }
    result
  }

  def union(that: Set_${T}${T_Param}): HashSet_${T}${T_Param} = {
    val result = new HashSet_${T}${T_Param}(initialSize = capacity)
    var i = 0
    while (i < capacity) {
      if (!isInit(hashes(i))) result.add(_keys(i)${Cast_to_T})
      i += 1
    }
    i = 0
    while (i < that.capacity) {
      if (!isInit(that.hashAt(i))) result.add(that.keyAt(i))
      i += 1
    }
    result
  }

  def diff(that: Set_${T}${T_Param}): HashSet_${T}${T_Param} = {
    val result = new HashSet_${T}${T_Param}
    var i = 0
    while (i < capacity) {
      val hash = hashes(i)
      if (!isInit(hash)) {
        val key = _keys(i)${Cast_to_T}
        if (!that(key)) result.add(key)
      }
      i += 1
    }
    result
  }

  private[this] def growIfNecessary: Unit =
    if (_size > threshold) {
      growToNewCapacity (capacity * (if (capacity < 10000) 4 else 2))
    }

  private[this] def growToNewCapacity(newCapacity: Int) = {
    val oldCapacity = capacity
    val oldHashes = hashes
    val oldKeys = _keys
    capacity = newCapacity
    threshold = (capacity * 0.9).toInt
    mask = capacity - 1
    hashes = new Array[Int](capacity)
    _keys = new Array[${T_Array}](capacity)
    _size = 0
    var i = 0
    while (i < oldCapacity) {
      val hash = oldHashes(i)
      if (!isInit(hash)) {
        val key = oldKeys(i)${Cast_to_T}
        add(key)
      }
      i += 1
    }
  }

  private[this] def hashCode(key: ${T_Arg}) = {
    var hash = hashK.hash(key) & mask
    hash |= (if (hash == 0) 1 else 0)
    hash
  }

  def compact: Unit = {
    var newCapacity = 1
    while (newCapacity * 2 < threshold) newCapacity *= 2
    if (newCapacity != capacity) growToNewCapacity(newCapacity)
  }

  def hashAt(index: Int): Int = hashes(index)
  def keyAt(index: Int): ${T_Arg} = _keys(index)${Cast_to_T}
  def isInit(hash: Int) = hash == 0

  def isEmpty = _size == 0
  def size: Int = _size

  def foreach(f: ${T_Arg} => Unit): Unit = {
    var i = 0
    while (i < capacity) {
      val hash = hashes(i)
      if (!isInit(hash)) {
        val key = _keys(i)${Cast_to_T}
        f(key)
      }
      i += 1
    }
  }
}

% end
