package offheap.collection

import HashEq._

%{
types = ['Boolean', 'Char', 'Byte', 'Short',
  'Int', 'Long', 'Float', 'Double', 'Object']
}%

% for T in types:

trait Seq_${T} extends Any with Seq[${T}] {
  def apply(index: Int): ${T}
  def append(elem: ${T}): Unit
  def update(index: Int, value: ${T}): Unit
  def remove(n: Int): ${T}
  def index(elem: ${T}): Int
  def insert(index: Int, elem: ${T}): Unit
  def foreach(f: ${T} => Unit)
  def capacity: Int
}

class BufferSeq_${T}(initialSize: Int = 16)(implicit eq: Eq_${T})
  extends Seq_${T} {

  private[this] var array: Array[${T}] = new Array[${T}](initialSize)
  private[this] var _size = 0

  def apply(index: Int): ${T} = array(index)

  def append(elem: ${T}): Unit = {
    val newSize = _size + 1
    growTo(newSize)
    array(_size) = elem
    _size += 1
  }

  def update(index: Int, value: ${T}): Unit = array(index) = value

  def remove(n: Int): ${T} = {
    val removed = array(n)
    copy(n + 1, n, _size - n)
    _size -= 1
    removed
  }

  def index(elem: ${T}): Int = {
    var result = -1
    var i = 0
    while ({
      if (i < _size) {
        if (eq.eqv(array(i), elem)) {
          result = i
          false
        } else {
          i += 1
          true
        }
      } else {
        false
      }
    }) ()
    result
  }

  def insert(index: Int, elem: ${T}): Unit = {
    val newSize = _size + 1
    growTo(newSize)
    copy(index, index + 1, _size - index)
    array(index) = elem
    _size += 1
  }

  def map_${T}(f: ${T} => ${T}): BufferSeq_${T} = {
    val builder = new BufferSeq_${T}(initialSize = array.size)
    var i = 0
    while (i < _size) {
      builder.append(f(array(i)))
      i += 1
    }
    builder
  }

  def flatMap_${T}(f: ${T} => Seq_${T}): BufferSeq_${T} = {
    val builder = new BufferSeq_${T}
    var i = 0
    while (i < _size) {
      val el = array(i)
      val result = f(el)
      val resultSize = result.size
      var j = 0
      while (j < resultSize) {
        builder.append(result(j))
        j += 1
      }
      i += 1
    }
    builder
  }

  def filter_${T}(f: ${T} => Boolean): Seq_${T} = {
    val result = new BufferSeq_${T}
    var i = 0
    while (i < _size) {
      val el = array(i)
      if (f(el)) result.append(el)
      i += 1
    }
    result
  }

  private def copy(src: Int, dest: Int, len: Int) = System.arraycopy(array, src, array, dest, len)

  private def shouldGrow(newSize: Int) = newSize > capacity
  private def grow = {
    val newArray = new Array[${T}](capacity * 2)
    System.arraycopy(array, 0, newArray, 0, _size)
    this.array = newArray
  }
  private def growTo(size: Int) = while (shouldGrow(size)) grow

  override def empty = _size == 0
  override def size: Int = _size
  override def foreach(f: ${T} => Unit): Unit = {
    var i = 0
    while (i < _size) {
      f(array(i))
      i += 1
    }
  }

  def capacity = array.size
}

% end
