package offheap.collection

import HashEq._

%{
types = ['Boolean', 'Char', 'Byte', 'Short',
'Int', 'Long', 'Float', 'Double', 'Object']
}%

% for T in types:

trait Set_${T} extends Set[${T}] {
  def apply(elem: ${T}): Boolean
  def add(elem: ${T}): Boolean
  def remove(elem: ${T}): Boolean

  def intersect(that: Set_${T}): Set_${T}
  def union(that: Set_${T}): Set_${T}
  def diff(that: Set_${T}): Set_${T}
}

class HashSet_${T}(initialSize: Int = 8)(implicit hashK: Hash_${T}) extends Set_${T} {

  private[this] var hashes: Array[Int] = new Array[Int](initialSize)
  private[this] var _keys: Array[${T}] = new Array[${T}](initialSize)
  private[this] var _size = 0
  private[this] var capacity = initialSize
  private[this] var mask = capacity - 1

  def apply(key: ${T}): Boolean = indexOf(key) != -1

  private[this] def indexOf(key: ${T}): Int = {
    var hash = hashCode(key)
    var pos = hash
    var dis = 0
    var result = -1
    while ({
      val nextHash = hashes(pos)
      if (!isInit(nextHash)) {
        val nextDis = (capacity + pos - nextHash) & mask
        if (nextDis >= dis) {
          if (hash == nextHash && hashK.eqv(_keys(pos), key)) {
            result = pos
            false
          } else {
            dis += 1
            pos = (pos + 1) & mask
            true
          }
        } else {
          false
        }
      } else {
        false
      }
    }) ()
    result
  }

  def add(key: ${T}): Boolean = {
    var _key = key
    var originalHash = hashCode(key)
    var hash = originalHash
    var pos = hash
    var dis = 0
    var result = true
    while ({
      val nextHash = hashes(pos)
      if (isInit(nextHash)) {
        hashes(pos) = hash
        _keys(pos) = _key
        _size += 1
        growIfNecessary
        result = true
        false
      } else if (nextHash == originalHash && hashK.eqv(_keys(pos), key)) {
        result = false
        false
      } else {
        val nextDis = (capacity + pos - nextHash) & mask
        if (nextDis < dis) {
          val nextKey = _keys(pos)
          hashes(pos) = hash
          _keys(pos) = _key
          hash = nextHash
          _key = nextKey
          dis = nextDis
        }
        dis += 1
        pos = (pos + 1) & mask
        true
      }
    }) ()
    result
  }

  def remove(key: ${T}): Boolean = {
    var index = indexOf(key)
    if (index != -1) {
      while ({
        val nextIndex = (index + 1) & mask
        val nextHash = hashes(nextIndex)
        if (!isInit(nextHash)) {
          val nextDis = (capacity + nextIndex - nextHash) & mask
          if (nextDis != 0) {
            hashes(index) = hashes(nextIndex)
            _keys(index) = _keys(nextIndex)
            index = nextIndex
            true
          } else {
            false
          }
        } else {
          false
        }
      }) ()
      hashes(index) = 0
      _size -= 1
      true
    } else {
      false
    }
  }

  def intersect(that: Set_${T}): HashSet_${T} = {
    val result = new HashSet_${T}
    foreach { a =>
      if (that(a)) result.add(a)
    }
    result
  }

  def union(that: Set_${T}): HashSet_${T} = {
    val result = new HashSet_${T}
    this foreach (result.add(_))
    that foreach (result.add(_))
    result
  }

  def diff(that: Set_${T}): HashSet_${T} = {
    val result = new HashSet_${T}
    foreach { a =>
      if (!that(a)) result.add(a)
    }
    result
  }

  @inline
  private[this] def shouldGrow = _size > capacity * 9 / 10

  private[this] def growIfNecessary: Unit = {
    if (shouldGrow) {
      val oldCapacity = capacity
      val oldHashes = hashes
      val oldKeys = _keys
      capacity *= 2
      mask = capacity - 1
      hashes = new Array[Int](capacity)
      _keys = new Array[${T}](capacity)
      _size = 0
      var i = 0
      while (i < oldCapacity) {
        val hash = oldHashes(i)
        if (!isInit(hash)) {
          val key = oldKeys(i)
          add(key)
        }
        i += 1
      }
    }
  }

  private[this] def hashCode(key: ${T}) = {
    var hash = hashK.hash(key) & mask
    hash |= (if (hash == 0) 1 else 0)
    hash
  }

  @inline
  private[this] def isInit(hash: Int) = hash == 0

  override def empty = _size == 0

  override def size: Int = _size

  override def foreach(f: ${T} => Unit): Unit = {
    var i = 0
    while (i < capacity) {
      val hash = hashes(i)
      if (!isInit(hash)) {
        val key = _keys(i)
        f(key)
      }
      i += 1
    }
  }
}

% end
