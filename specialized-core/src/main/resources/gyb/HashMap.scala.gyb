package offheap.collection

import HashEq._

%{
from itertools import product

types = ['Boolean', 'Char', 'Byte', 'Short',
'Int', 'Long', 'Float', 'Double', 'Object']
}%

% for (K, V) in product(types, types):

%{
  if (K == 'Object' and V == 'Object'):
    Param = '[K, V]'
  elif K == 'Object':
    Param = '[K]'
  elif V == 'Object':
    Param = '[V]'
  else:
    Param = ''

  if K == 'Object':
    K_Arg = 'K'
    K_Array = 'AnyRef'
    K_Set = 'Set_Object[K]'
    K_HashSet = 'HashSet_Object[K]'
    Cast_to_K = '.asInstanceOf[' + K_Arg + ']'
    Cast_from_K = '.asInstanceOf[AnyRef]'
  else:
    K_Arg = K
    K_Array = K
    K_Set = 'Set_' + K
    K_HashSet = 'HashSet_' + K
    Cast_to_K = ''
    Cast_from_K = ''

  if V == 'Object':
    V_Arg = 'V'
    V_Opt = 'Opt[V]'
    V_None = 'none'
    V_Some = 'Some'
    V_Array = 'AnyRef'
    V_Seq = 'Seq_Object[V]'
    V_BufferSeq = 'BufferSeq_Object[V]'
    Cast_to_V = '.asInstanceOf[' + V_Arg + ']'
    Cast_from_V = '.asInstanceOf[AnyRef]'
  else:
    V_Arg = V
    V_Opt = 'Opt_' + V
    V_None = 'None_' + V
    V_Some = 'Some_' + V
    V_Array = V
    V_Seq = 'Seq_' + V
    V_BufferSeq = 'BufferSeq_' + V
    Cast_to_V = ''
    Cast_from_V = ''
}%

trait Map_${K}_${V}${Param} extends Map[${K_Arg}, ${V_Arg}] {
  def apply(key: ${K_Arg}): ${V_Opt}
  def put(key: ${K_Arg}, value: ${V_Arg}): ${V_Opt}
  def remove(key: ${K_Arg}): ${V_Opt}
  def keys: ${K_Set}
  def values: ${V_Seq}
  def contains(key: ${K_Arg}): Boolean

  def capacity: Int
  def hashAt(index: Int): Int
  def keyAt(index: Int): ${K_Arg}
  def valueAt(index: Int): ${V_Arg}
  def updateValue(index: Int, value: ${V_Arg}): Unit
  def isInit(hash: Int): Boolean
}

class HashMap_${K}_${V}${Param}(initialSize: Int = 8)
  % if K == V:
    (implicit hashK: Hash_${K})
  % else:
    (implicit hashK: Hash_${K}, hashV: Hash_${V})
  % end
    extends Map_${K}_${V}${Param} {

  private[this] var hashes: Array[Int] = new Array[Int](initialSize)
  private[this] var _keys: Array[${K_Array}] = new Array[${K_Array}](initialSize)
  private[this] var _values: Array[${V_Array}] = new Array[${V_Array}](initialSize)
  private[this] var _size = 0
  var capacity = initialSize
  private[this] var mask = capacity - 1

  % if V == 'Object':
  private[this] val none = new None[V]
  % end

  def apply(key: ${K_Arg}): ${V_Opt} = {
    val index = indexOf(key)
    if (index == -1) {
      ${V_None}
    } else {
      new ${V_Some}(_values(index)${Cast_to_V})
    }
  }

  private[this] def indexOf(key: ${K_Arg}): Int = {
    var hash = hashCode(key)
    var pos = hash
    var dis = 0
    var result = -1
    while ({
      val nextHash = hashes(pos)
      if (!isInit(nextHash)) {
        val nextDis = (capacity + pos - nextHash) & mask
        if (nextDis >= dis) {
          if (hash == nextHash && hashK.eqv(_keys(pos), key)) {
            result = pos
            false
          } else {
            dis += 1
            pos = (pos + 1) & mask
            true
          }
        } else {
          false
        }
      } else {
        false
      }
    }) ()
    result
  }

  def put(key: ${K_Arg}, value: ${V_Arg}): ${V_Opt} = {
    var _key = key${Cast_from_K}
    var _value = value${Cast_from_V}
    var originalHash = hashCode(key)
    var hash = originalHash
    var pos = hash
    var dis = 0
    var previous: ${V_Opt} = ${V_None}
    while ({
      val nextHash = hashes(pos)
      if (isInit(nextHash)) {
        hashes(pos) = hash
        _keys(pos) = _key
        _values(pos) = _value
        _size += 1
        growIfNecessary
        false
      } else if (nextHash == originalHash && hashK.eqv(_keys(pos), key)) {
        previous = new ${V_Some}(_values(pos)${Cast_to_V})
        _values(pos) = value${Cast_from_V}
        false
      } else {
        val nextDis = (capacity + pos - nextHash) & mask
        if (nextDis < dis) {
          val nextKey = _keys(pos)
          val nextVal = _values(pos)
          hashes(pos) = hash
          _keys(pos) = _key
          _values(pos) = _value
          hash = nextHash
          _key = nextKey
          _value = nextVal
          dis = nextDis
        }
        dis += 1
        pos = (pos + 1) & mask
        true
      }
    }) ()
    previous
  }

  def remove(key: ${K_Arg}): ${V_Opt} = {
    var index = indexOf(key)
    if (index != -1) {
      val previous = new ${V_Some}(_values(index)${Cast_to_V})
      while ({
        val nextIndex = (index + 1) & mask
        val nextHash = hashes(nextIndex)
        if (!isInit(nextHash)) {
          val nextDis = (capacity + nextIndex - nextHash) & mask
          if (nextDis != 0) {
            hashes(index) = hashes(nextIndex)
            _keys(index) = _keys(nextIndex)
            _values(index) = _values(nextIndex)
            index = nextIndex
            true
          } else {
            false
          }
        } else {
          false
        }
      }) ()
      hashes(index) = 0
      _size -= 1
      previous
    } else {
      ${V_None}
    }
  }

  def keys: ${K_Set} = {
    val result = new ${K_HashSet}
    var i = 0
    while (i < capacity) {
      if (!isInit(hashes(i))) result.add(_keys(i)${Cast_to_K})
      i += 1
    }
    result
  }

  def values: ${V_Seq} = {
    val result = new ${V_BufferSeq}
    var i = 0
    while (i < capacity) {
      if (!isInit(hashes(i))) result.append(_values(i)${Cast_to_V})
      i += 1
    }
    result
  }

  def contains(key: ${K_Arg}): Boolean = this(key).notEmpty

  @inline
  private[this] def shouldGrow = _size > capacity * 9 / 10

  private[this] def growIfNecessary: Unit = {
    if (shouldGrow) {
      val oldCapacity = capacity
      val oldHashes = hashes
      val oldKeys = _keys
      val oldValues = _values
      capacity *= 2
      mask = capacity - 1
      hashes = new Array[Int](capacity)
      _keys = new Array[${K_Array}](capacity)
      _values = new Array[${V_Array}](capacity)
      _size = 0
      var i = 0
      while (i < oldCapacity) {
        val hash = oldHashes(i)
        if (!isInit(hash)) {
          val key = oldKeys(i)${Cast_to_K}
          val value = oldValues(i)${Cast_to_V}
          put(key, value)
        }
        i += 1
      }
    }
  }

  private[this] def hashCode(key: ${K_Arg}) = {
    var hash = hashK.hash(key) & mask
    hash |= (if (hash == 0) 1 else 0)
    hash
  }

  def hashAt(index: Int): Int = hashes(index)
  def keyAt(index: Int): ${K_Arg} = _keys(index)${Cast_to_K}
  def valueAt(index: Int): ${V_Arg} = _values(index)${Cast_to_V}
  def updateValue(index: Int, value: ${V_Arg}): Unit = _values(index) = value${Cast_from_V}
  def isInit(hash: Int) = hash == 0

  def empty = _size == 0
  def size: Int = _size

  def foreach(f: (${K_Arg}, ${V_Arg}) => Unit): Unit = {
    var i = 0
    while (i < capacity) {
      val hash = hashes(i)
      if (!isInit(hash)) {
        val key = _keys(i)${Cast_to_K}
        val value = _values(i)${Cast_to_V}
        f(key, value)
      }
      i += 1
    }
  }
}

% end
