package offheap.collection

import scala.reflect.ClassTag

import HashEq._

%{
types = ['Boolean', 'Char', 'Byte', 'Short',
  'Int', 'Long', 'Float', 'Double', 'Object']
}%

% for T in types:

%{
  if T == 'Object':
    T_Arg = 'A'
    T_Param_Decl = '[A: ClassTag]'
    T_Param = '[A]'
  else:
    T_Arg = T
    T_Param_Decl = ''
    T_Param = ''
}%

trait Seq_${T}${T_Param} extends Any with Seq[${T_Arg}] {
  def apply(index: Int): ${T_Arg}
  def append(elem: ${T_Arg}): Unit
  def update(index: Int, value: ${T_Arg}): Unit
  def remove(n: Int): ${T_Arg}
  def index(elem: ${T_Arg}): Int
  def insert(index: Int, elem: ${T_Arg}): Unit
  def foreach(f: ${T_Arg} => Unit)
  def capacity: Int
}

class BufferSeq_${T}${T_Param_Decl}(initialSize: Int = 16)(implicit eq: Eq_${T}) extends Seq_${T}${T_Param} {

  var array: Array[${T_Arg}] = new Array[${T_Arg}](initialSize)
  var size = 0

  def apply(index: Int): ${T_Arg} = array(index)

  def append(elem: ${T_Arg}): Unit = {
    val newSize = size + 1
    growTo(newSize)
    array(size) = elem
    size += 1
  }

  def update(index: Int, value: ${T_Arg}): Unit = array(index) = value

  def remove(n: Int): ${T_Arg} = {
    val removed = array(n)
    copy(n + 1, n, size - n)
    size -= 1
    removed
  }

  def index(elem: ${T_Arg}): Int = {
    var result = -1
    var i = 0
    while ({
      if (i < size) {
        if (eq.eqv(array(i), elem)) {
          result = i
          false
        } else {
          i += 1
          true
        }
      } else {
        false
      }
    }) ()
    result
  }

  def insert(index: Int, elem: ${T_Arg}): Unit = {
    val newSize = size + 1
    growTo(newSize)
    copy(index, index + 1, size - index)
    array(index) = elem
    size += 1
  }

  def map_${T}(f: ${T_Arg} => ${T_Arg}): BufferSeq_${T}${T_Param} = {
    val builder = new BufferSeq_${T}${T_Param}(initialSize = array.size)
    var i = 0
    while (i < size) {
      builder.append(f(array(i)))
      i += 1
    }
    builder
  }

  def flatMap_${T}(f: ${T_Arg} => Seq_${T}${T_Param}): BufferSeq_${T}${T_Param} = {
    val builder = new BufferSeq_${T}${T_Param}
    var i = 0
    while (i < size) {
      val el = array(i)
      val result = f(el)
      val resultSize = result.size
      var j = 0
      while (j < resultSize) {
        builder.append(result(j))
        j += 1
      }
      i += 1
    }
    builder
  }

  def filter_${T}(f: ${T_Arg} => Boolean): Seq_${T}${T_Param} = {
    val result = new BufferSeq_${T}${T_Param}
    var i = 0
    while (i < size) {
      val el = array(i)
      if (f(el)) result.append(el)
      i += 1
    }
    result
  }

  private def copy(src: Int, dest: Int, len: Int) = System.arraycopy(array, src, array, dest, len)

  private def shouldGrow(newSize: Int) = newSize > capacity
  private def grow = {
    val newArray = new Array[${T_Arg}](capacity * 2)
    System.arraycopy(array, 0, newArray, 0, size)
    this.array = newArray
  }
  private def growTo(size: Int) = while (shouldGrow(size)) grow

  def empty = size == 0
  def capacity = array.size

  def foreach(f: ${T_Arg} => Unit): Unit = {
    var i = 0
    while (i < size) {
      f(array(i))
      i += 1
    }
  }

}

% end
